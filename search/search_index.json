{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"Data%20Structures%20%28Home%29/","title":"Data Structures","text":"\\[ by \\newline C.Lakshmanshankar \\]  \ud83d\udca5 $A Repository for all my data structures and  Algorithms stuff$   <ul> <li> Arrays</li> <li> Stacks</li> <li> Queues</li> <li> Linked List</li> <li> Trees</li> <li> Graphs</li> <li> Hash map</li> <li> Sets</li> </ul>"},{"location":"Data%20Structures%20%28Home%29/#arrays","title":"Arrays","text":"<p>Arrays (TS)</p>"},{"location":"Data%20Structures%20%28Home%29/#sorting","title":"Sorting","text":"<p>Sorting</p>"},{"location":"Data%20Structures%20%28Home%29/#bit-manipulation","title":"Bit Manipulation","text":"<p>Bit Manipulation</p>"},{"location":"Data%20Structures%20%28Home%29/#graphs","title":"Graphs","text":"<p>Graph Data structure</p>"},{"location":"D%20S%20A/Arrays%20%28TS%29/","title":"Arrays (TS)","text":"<ol> <li>Arrays are contiguous portion of blocks in the memory</li> <li>Accessed via Index</li> </ol> <p>https://drive.google.com/file/d/1SX7MZL_zSaySdueaYekdI_vsElv7B3HE/view?usp=drive_web</p>"},{"location":"D%20S%20A/Arrays%20%28TS%29/#static-arrays","title":"Static Arrays","text":"<p>Simplest form of array represented by contiguous blocks of memory</p> <p></p> <p>Memory address refers to the address of values \u2192 as u can see that the values are differ exactly by 4  because they are integers and each integer takes up 4 Bytes space Max Size chart below on Typed Arrays</p> <ul> <li> <p>Advantages</p> <p>Access Elements at O(1) and efficient use of memory</p> <p>compaction. Remember the College Days</p> </li> <li> <p>Disadvantages</p> <ol> <li>Insertion and deletion is not efficient</li> <li>cannot use small spaces while we need a large portion thus wasting spaces</li> </ol> </li> </ul> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main () {\nint arr[5] = {1,2,3,4,5};\ncout &lt;&lt; arr[0] &lt;&lt; \"....\" &lt;&lt; arr[4] &lt;&lt; endl;\n// cout &lt;&lt; &amp;arr[0] &lt;&lt;\"\\n\"&lt;&lt; &amp;arr[1] &lt;&lt; \"\\n\" &lt;&lt; &amp;arr[2]; // exactly by 4\ncout &lt;&lt; *(arr+0) &lt;&lt; \"...\" &lt;&lt; *(arr+4);\nreturn 0;\n}\n</code></pre> <ol> <li>static arrays can be accessed via the index.</li> <li>well you can also access via pointer. really the pointers and arrays are similar than u think</li> </ol>"},{"location":"D%20S%20A/Arrays%20%28TS%29/#dynamic-arrays","title":"Dynamic Arrays","text":"<p>Dynamic Arrays are also similar to static arrays but they have some advantages like dynamically increase or decrease its size</p> <p>though it also comes with its own disadvantages as well. In C++ vectors in STL are the common example for dynamic arrays</p>"},{"location":"D%20S%20A/Arrays%20%28TS%29/#how-dynamic-arrays-work","title":"How Dynamic Arrays work:","text":"<p>dynamic arrays are also like static arrays but the can increase the size by current size when N-1th element is added we assume that more values are added to this array and increment the size by the current length. you\u2019re right</p> <p>we cannot increment the instead create new array and copy all the contents to the new array. well this is way more efficient than many other ways</p> <p>Python List and JavaScript Arrays and C++ Vectors are examples of Dynamic Arr</p>"},{"location":"D%20S%20A/Arrays%20%28TS%29/#example","title":"Example","text":"<p>As we can clearly see that when we add elements closer to the size of arr it will increase the size and copy all the elements to the new array</p>  \ud83d\udca1 There are other ways also we can use like increase the Size to huge number but that is not efficient as we did before"},{"location":"D%20S%20A/Arrays%20%28TS%29/#array-buffer-typed-arrays","title":"Array Buffer &amp; Typed Arrays","text":"<pre><code>ArrayBuffer -&gt; basket of size (4)\nUint16Array(2KG) watermelon -&gt; we can put 2 Melon on ArrayBuffer\nUint8Array(1KG) Muskmelon -&gt; we can put 4 on current basket\n</code></pre> <p>ArrayBuffer - JavaScript | MDN</p> <p>TypedArray - JavaScript | MDN</p> <p>Size chart for typed arrays</p> <p>Base class for u int Arrays provide efficient way to handle binary data <pre><code>const buffer= new ArrayBuffer(4); // 4 bytes [0,0,0,0]\nbuffer[1]=23 // ! you cant do this\nconst oneByte=new Uint8Array(buffer) // create 4 (1 Byte arrays)\n\nfor (let i = 0; i &lt; 4; i++) \n    oneByte[i]=2*i;\n\nconsole.log(oneByte);//Uint8Array(4) [ 0, 2, 4, 6 ]\nconsole.log(buffer); //ArrayBuffer(4) [ 0, 2, 4, 6 ]\n</code></pre>  \ud83d\udca5 they cannot be directly modified (instead new typed array can be used)   <p>Array Buffer provide fixed binary space for typed arrays like Uint8Array\u2026.. </p> <p>Provide a way for efficient Bit wise operations </p>"},{"location":"D%20S%20A/Arrays%20%28TS%29/#typed-arrays","title":"Typed Arrays","text":"<pre><code>// typed arrays\nconst bigBuffer=new ArrayBuffer(16);\nconst oneByte = new Uint8Array(bigBuffer) // 16 (we can create 16 oneByteArrays)\nconst fourByte=new Uint32Array(bigBuffer);\nconsole.log(oneByte.length);// 4 (each one is 4Bytes)\n</code></pre> <p>Typed Arrays are views \u2192 underlying buffer sizes</p>  \ud83d\udca5 typed \u2192 views that modify the array Buffer   <p>Think of a interface to modify the Array buffer</p>  \ud83d\udca1 same array buffer can be shared across two views but it need enough spaces   \\[ Typed Arrays (Views) =&gt; ArrayBuffer(TotalBytes) \\]"},{"location":"D%20S%20A/Arrays%20%28TS%29/#linear-search","title":"Linear Search","text":"\\[ Time Complexity=BigOh(N)  \\]"},{"location":"D%20S%20A/Bit%20Manipulation/","title":"Bit Manipulation","text":"<p>Python Bitwise Operators - GeeksforGeeks</p> <p>Page contains info about bit manipulation </p> <ol> <li>AND </li> <li>OR</li> <li>XOR</li> <li>NOR</li> <li>N AND</li> </ol>"},{"location":"D%20S%20A/Bit%20Manipulation/#bit-wise-and","title":"Bit wise AND (<code>&amp;</code>):","text":"<p>And output true if both values are true</p>"},{"location":"D%20S%20A/Bit%20Manipulation/#truth-table","title":"Truth Table","text":"<p>\\(a * b\\) </p> A B A * B 0 0 0 0 1 0 1 0 0 1 1 1"},{"location":"D%20S%20A/Bit%20Manipulation/#code","title":"Code","text":"<pre><code>print( 1 and 0) #normal and\nprint( 1 &amp; 0) # Bitwise and\n</code></pre>"},{"location":"D%20S%20A/Bit%20Manipulation/#bit-wise-or","title":"Bit wise OR (<code>|</code>):","text":"<p>And output true if any of the values are true</p>"},{"location":"D%20S%20A/Bit%20Manipulation/#truth-table_1","title":"Truth Table","text":"<p>\\(a * b\\) </p> A B A * B 0 0 0 0 1 1 1 0 1 1 1 1"},{"location":"D%20S%20A/Bit%20Manipulation/#code_1","title":"Code","text":"<pre><code>print( 1 or 0) #normal and\nprint( 1 | 0) # Bitwise and\n</code></pre>"},{"location":"D%20S%20A/Bit%20Manipulation/#bit-wise-xor","title":"Bit wise XOR (<code>^</code>):","text":"<p>\\(a \u2295 b\\)</p> <p>Result is 1 if any of the value is one but not 2 of them</p>  \ud83d\udca1 xor is a logical operation works on the bits rather like and or operaion"},{"location":"D%20S%20A/Bit%20Manipulation/#truth-table_2","title":"Truth Table","text":"<p>\\(a * b\\) </p> A B A * B 0 0 0 0 1 1 1 0 1 1 1 0  \ud83d\udca1 1 ^ even \u2192 will return 1+even    \ud83d\udca1 1 ^ odd \u21d2 will return 1 - odd"},{"location":"D%20S%20A/Bit%20Manipulation/#code_2","title":"Code","text":"<pre><code>print( 1 ^ 2) # 3\nprint( 1 ^ 3) # 2\n</code></pre>"},{"location":"D%20S%20A/Bit%20Manipulation/#example","title":"Example","text":"<pre><code>1 ^ 3 = &gt; 2\n\n0000 0001 -&gt; 1\n0000 0011 -&gt; 3\n----------\n0000 0010 -&gt; 2\n----------\n</code></pre>"},{"location":"D%20S%20A/Bit%20Manipulation/#bit-wise-not","title":"Bit wise NOT (<code>~</code>):","text":"\\[ ! a  \\] <p>Result is 1 if any of the value is one but not 2 of them</p>  \ud83d\udca1 xor is a logical operation works on the bits rather like and or operaion"},{"location":"D%20S%20A/Bit%20Manipulation/#truth-table_3","title":"Truth Table","text":"<p>\\(a * b\\) </p> A B A * B 0 0 1 0 1 0 1 0 0 1 1 0  \ud83d\udca1 1 ^ even \u2192 will return 1+even    \ud83d\udca1 1 ^ odd \u21d2 will return 1 - odd"},{"location":"D%20S%20A/Bit%20Manipulation/#code_3","title":"Code","text":"<pre><code>print( !False) # True\n</code></pre>  \ud83d\udca1 Just &lt;&lt; and &gt;&gt; are remaining which is left and right shift"},{"location":"D%20S%20A/Graph%20Home/","title":"Graph Data structure","text":""},{"location":"D%20S%20A/Graph%20Home/#what-is-a-graph","title":"what is a graph ?","text":"<ol> <li>non linear data structure represented using nodes and edges</li> <li>two forms of graph representation<ol> <li>matrix representation</li> <li>adjacency matrix</li> </ol> </li> <li>useful for representing networks, relationships etc..</li> <li>used widely in social networks like linked-in and other social media platforms</li> </ol>"},{"location":"D%20S%20A/Graph%20Home/#example","title":"Example","text":"<p>The above is the basic graph which connects 5 nodes from 1 - 5. </p> <ol> <li><code>Nodes/vertices</code> are represented using <code>circles</code> .</li> <li><code>edges</code> are represented using the <code>lines.</code></li> </ol>"},{"location":"D%20S%20A/Graph%20Home/#types-of-graphs","title":"Types of graphs:","text":"<p>https://www.geeksforgeeks.org/graph-types-and-applications/</p> <p>Directed Graph</p> <p>undirected Graph </p>"},{"location":"D%20S%20A/Graph%20Home/#representation","title":"Representation","text":"<p>Matrix Form (Adj Matrix)</p> <p>Adjacency List</p>"},{"location":"D%20S%20A/Sorting/","title":"Sorting","text":"<p>Arrange the elements in the Ascending order or descending order</p>"},{"location":"D%20S%20A/Sorting/#quick-sort","title":"Quick Sort:","text":"\ud83d\udca1 Approach :     Divide and conqueror   <p>Time Complexity</p> <p>$$ Worst Case = O(n^2) \\newline Average Case  = O(n log n) </p> <p>$$</p> <ol> <li>Take a Pivot (Which In this case is Last char</li> <li>Try to find the right position for pivot meaning all the smallest elements needs to be on the left of the pivot</li> <li>Now the pivot is in the right place now we can recursively call the left and right sub arrays</li> </ol> <p>QuickSort - Data Structure and Algorithm Tutorials - GeeksforGeeks</p> <pre><code>def quicksort(arr, l, r):\n    if l &lt; r:\n        mid = partition(arr, l, r)\n        quicksort(arr, l, mid - 1)\n        quicksort(arr, mid + 1, r)\n    return arr\n\ndef partition(arr, l, r):\n    i, j = l - 1, l\n\n    while j &lt;= r:\n        if arr[j] &lt; arr[r]:\n            i += 1\n            arr[i], arr[j] = arr[j], arr[i]\n        j += 1\n\n    i += 1 \n    arr[i], arr[r] = arr[r], arr[i]\n    return i\n</code></pre>  \ud83d\udca1 Smallest Element should always before the pivot   \\[ f(x) = f(6*n) \\]"},{"location":"D%20S%20A/BinaryTrees/Binary%20Tree%20Height/","title":"Binary Tree Height","text":""},{"location":"D%20S%20A/BinaryTrees/Binary%20Tree%20Height/#insert-into-bst-leetcode","title":"Insert Into BST (Leetcode)","text":"<p> <code>Add 5</code> -&gt; we need to find a  place to add node. </p> <ol> <li>if root is none return A Node(val)</li> <li>if root.val &lt; key then the element need to be at the left subtree <ul> <li>so the root.left=inserted(root.left,)</li> </ul> </li> <li>Root.right -&gt; same</li> </ol>"},{"location":"D%20S%20A/BinaryTrees/Traversals/","title":"Traversals","text":"<p>A tree like Struct which has 2 pointer one for left sub Tree and other for right sub tree.</p> <p>Creation <pre><code>class Node:\n    def __init__(self, val) -&gt; None:\n        self.val = val\n        self.left = None\n        self.right = None\n\na = Node(1)\nb = Node(2)\nc = Node(3)\nd = Node(4)\ne = Node(5)\n\na.left = b\na.right = c\n\nb.left = d\nb.right = e\n</code></pre></p> <pre><code>        a\n       / \\\n      b   c\n     / \\\n    d   e\n</code></pre>"},{"location":"D%20S%20A/BinaryTrees/Traversals/#traversal","title":"Traversal","text":"<ol> <li>Depth First Traversal stack <pre><code>def dfsstack(root: Node):\n    stack = [root]\n    while stack:\n        curr = stack.pop()\n        print(curr.val)\n        if (curr.left):\n            stack.append(curr.left)\n\n        if (curr.right):\n            stack.append(curr.right)\n</code></pre></li> <li>DFS (recursion)  <pre><code>def dfs(root: Node):\n    if not root:\n        return\n    dfs(root.left)\n    print(root.val)\n    dfs(root.right)\n</code></pre>  The above is a binary Tree Traversal will be like this</li> <li>Root (1) then push 2 and 3 onto stack the pop 3 then pop 2  do this while stack is not empty</li> </ol>"},{"location":"D%20S%20A/BinaryTrees/Traversals/#inorder-traversal","title":"Inorder Traversal","text":"<p> 1. Left print 2. root then right  ANS=&gt; 4 2 5 1 3  <pre><code>def inorder(root: Node):\n    if not root:\n        return\n\n    inorder(root.left)\n    print(root.val)\n    inorder(root.right)\n</code></pre></p>"},{"location":"D%20S%20A/BinaryTrees/Traversals/#pre-order","title":"Pre order","text":"<ol> <li>Traverse the root first </li> <li>then the left </li> <li>finally right  <pre><code>def preorder(root: Node):\n    if not root:\n        return\n\n    print(root.val, end=\"-&gt; \")\n    preorder(root.left)\n    preorder(root.right)\n</code></pre></li> </ol>"},{"location":"D%20S%20A/BinaryTrees/Traversals/#post-order","title":"Post Order","text":"<ol> <li>Left</li> <li>right Sub tree</li> <li>then Print(root) </li> </ol> <pre><code>def postorder(root: Node):\n    if not root:\n        return\n\n    postorder(root.left)\n    postorder(root.right)\n    print(root.val, end=\"-&gt; \")\n</code></pre>"},{"location":"D%20S%20A/BinaryTrees/Traversals/#level-order-traversal","title":"Level Order Traversal","text":"<ol> <li>BFS</li> <li>using Queue we can implement BFS</li> <li>Goes Level By level </li> <li>same as dfs stack but instead we use queue key diff  is we can traverse by levels  <pre><code>def bfs(root: Node):\n    queue = [root]\n    while queue:\n        curr = queue.pop(0)\n        print(curr.val)\n        if (curr.left):\n            queue.append(curr.left)\n\n        if (curr.right):\n            queue.append(curr.right)\n</code></pre></li> </ol>"},{"location":"D%20S%20A/Graph%20Data%20structure/Adjacency%20List/","title":"Adjacency List","text":"<p>Most common representation of graph</p> <ol> <li>A lot easier than Matrix representation to traverse</li> <li>Simply represented via a Dictionary or hash map or JavaScript object</li> </ol>"},{"location":"D%20S%20A/Graph%20Data%20structure/Adjacency%20List/#example","title":"Example","text":"<p>Simply the Source is the key and the Array of values are the destinations</p> <ol> <li>Advantage \u2192 A lot easier to traverse</li> <li>We can also store weights in adj List but i don\u2019t know how to do that in Adj matrix</li> </ol> <pre><code>adj={\n    0 : [ 1, 3 ],\n    1 : [ 0, 2 ],\n    2 : [ 1 ],\n    3 : [ 0, 4 ],\n    4 : [ 1, 3 ]\n}\n</code></pre> <p>Okay that\u2019s enough About What Graphs Now move on to traversal</p>"},{"location":"D%20S%20A/Graph%20Data%20structure/Directed%20Graph/","title":"Directed Graph Traversals","text":"<p>These types of graph have directions in edges</p> <ol> <li>The can be traversed only in the directions</li> <li>example Instagram Followers</li> </ol>"},{"location":"D%20S%20A/Graph%20Data%20structure/Directed%20Graph/#example","title":"Example","text":"<p>This is similar to normal Graph But You can traverse along directions of the edges</p>"},{"location":"D%20S%20A/Graph%20Data%20structure/Directed%20Graph/#weighted-directed-graphs","title":"Weighted Directed Graphs","text":"<p>Just add weights to edges, think of like distance between nodes.</p>  \ud83d\udca1 Traveling along the edges can cost u the weight associated with it   <p></p> <p>the cost of traveling form 1 \u2192 3 is <code>4</code> like wise u can calculate</p>  \ud83d\udca1 Dijkstra\u2019s is the popular algorithm for shortest path. More about this on traversal page"},{"location":"D%20S%20A/Graph%20Data%20structure/Directed%20Graph/#cycles","title":"Cycles","text":"<p>These are the directions that points to same nodes causing infinite loops</p> <ol> <li>hash-set is used to avoid cycles in a graph</li> </ol> <p></p>  \ud83d\udca1 That\u2019s All for directed Graphs."},{"location":"D%20S%20A/Graph%20Data%20structure/Matrix%20Form%20%28Adj%20Matrix%29/","title":"Matrix Form (Adj Matrix)","text":"<ol> <li>Usually graphs are represented using 2D matrix of rows and cols</li> </ol>"},{"location":"D%20S%20A/Graph%20Data%20structure/Matrix%20Form%20%28Adj%20Matrix%29/#example","title":"Example","text":"<p><code>0</code> means that there is no edge from that source node to destination node</p> <p><code>1</code> represents the direct edge between two nodes</p>  \ud83d\udca1 In python this can be given as  a List[List[int]]   <pre><code>graph=[\n[0,1,0,1,0],\n[1,0,1,0,1],\n[0,1,0,0,0],\n[1,0,0,0,1],\n[0,1,0,1,0],]\n</code></pre> <ol> <li>DFS and BFS are the popular algorithms for traversing these graphs</li> </ol>"},{"location":"D%20S%20A/Graph%20Data%20structure/Matrix%20Form%20%28Adj%20Matrix%29/#keep-in-mind","title":"Keep in mind","text":"<ol> <li>While traversing a matrix use set to keep track of visited (row,cols)</li> <li>don\u2019t  overflow</li> </ol>"},{"location":"D%20S%20A/Graph%20Data%20structure/undirected%20Graph/","title":"undirected Graph","text":"<p>These types of graph have no directions in edges</p> <ol> <li>The can be traversed from source \u2192 destination or even destination to source</li> <li>Example Facebook friends Kind of bidirectional Relationship</li> </ol>"},{"location":"D%20S%20A/Graph%20Data%20structure/undirected%20Graph/#example","title":"Example","text":""},{"location":"D%20S%20A/Graph%20Data%20structure/undirected%20Graph/#weighted-undirected-graphs","title":"Weighted undirected Graphs","text":"<p>Just add weights to edges, think of like distance between nodes.</p>  \ud83d\udca1 Traveling along the edges can cost u the weight associated with it   <p>the cost of traveling form 1 \u2192 3 is <code>4</code> like wise u can calculate</p>  \ud83d\udca1 Dijkstra\u2019s is the popular algorithm for shortest path. More about this on traversal page   <p></p>"},{"location":"D%20S%20A/Graph%20Data%20structure/undirected%20Graph/#cycles","title":"Cycles","text":"<p>These are the directions that points to same nodes causing infinite loops</p> <ol> <li>hash-set is used to avoid cycles in a graph</li> <li></li> </ol> <p></p>  \ud83d\udca1 As u can see there is no direction this graph might contains cycles   <p>Example</p> <p><code>1</code> \u2192 <code>3</code> \u21d2 <code>4</code> \u21d2 <code>2</code> \u21d2 <code>1</code>  which can be possible</p>"},{"location":"D%20S%20A/Tries/TRIES/","title":"TRIES","text":"<p>A trie is a Tree like data structure which is efficient to search words. Not to search words but really efficient with starts with functionality.</p> <p>I Had attached  the Excalidraw file in this repo (see in Dropbox)</p> <p></p>"},{"location":"D%20S%20A/Tries/TRIES/#trie","title":"Trie","text":"<pre><code>The Above Trie has the following words\n</code></pre> index word 1 Apple 2 Ape 3 Age 4 And"},{"location":"D%20S%20A/Tries/TRIES/#search-and-starts-with","title":"Search and starts with","text":"<p>Apple is found in the tire so we can say it exists  1. But app is not found may  2. App [ l  e ] is starts with app that do not count towards app 3.  but starts with app might be true so</p> <p>So, Yeah now lets jump right into the code</p> <pre><code>class TreeNode:\n    def __init__(self):\n        self.children = {}\n        self.isLast = False\n\nclass Solution:\n\n    def __init__(self):\n        self.root = TreeNode()  # root is always be empty\n\n    def insert(self, word: str):\n        curr = self.root\n        for c in word:\n            if c not in curr.children:\n                curr.children[c] = TreeNode(c)\n            curr = curr.children[c]\n        curr.isLast = True\n\n    def search(self, word: str) -&gt; bool:\n        curr = self.root\n        for c in word:\n            if c not in curr.children:\n                return False\n            curr = curr.children[c]\n        return curr.isLast\n\n    def start(self, word: str) -&gt; bool:\n        curr = self.root\n        for c in word:\n            if c not in curr.children:\n                return False\n            curr = curr.children[c]\n        return False if curr.isLast else True\n</code></pre>"}]}